/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class MonethaClaimHandler extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "_token", type: "address" }],
        name: "reclaimToken",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_value", type: "uint256" }
        ],
        name: "reclaimEtherTo",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "isMonethaAddress",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "minStake",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "unpause",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "paused",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "pause",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "reclaimEther",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_to", type: "address" },
          { name: "_value", type: "uint256" }
        ],
        name: "reclaimTokenTo",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "claims",
        outputs: [
          { name: "state", type: "uint8" },
          { name: "modified", type: "uint256" },
          { name: "dealId", type: "uint256" },
          { name: "dealHash", type: "bytes32" },
          { name: "reasonNote", type: "string" },
          { name: "requesterId", type: "bytes32" },
          { name: "requesterAddress", type: "address" },
          { name: "requesterStaked", type: "uint256" },
          { name: "respondentId", type: "bytes32" },
          { name: "respondentAddress", type: "address" },
          { name: "respondentStaked", type: "uint256" },
          { name: "resolutionNote", type: "string" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_address", type: "address" },
          { name: "_isMonethaAddress", type: "bool" }
        ],
        name: "setMonethaAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "token",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          { name: "_token", type: "address" },
          { name: "_minStake", type: "uint256" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "previousMinStake", type: "uint256" },
          { indexed: false, name: "newMinStake", type: "uint256" }
        ],
        name: "MinStakeUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "dealId", type: "uint256" },
          { indexed: true, name: "claimIdx", type: "uint256" }
        ],
        name: "ClaimCreated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "dealId", type: "uint256" },
          { indexed: true, name: "claimIdx", type: "uint256" }
        ],
        name: "ClaimAccepted",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "dealId", type: "uint256" },
          { indexed: true, name: "claimIdx", type: "uint256" }
        ],
        name: "ClaimResolved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "dealId", type: "uint256" },
          { indexed: true, name: "claimIdx", type: "uint256" }
        ],
        name: "ClaimClosedAfterAcceptanceExpired",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "dealId", type: "uint256" },
          { indexed: true, name: "claimIdx", type: "uint256" }
        ],
        name: "ClaimClosedAfterResolutionExpired",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "dealId", type: "uint256" },
          { indexed: true, name: "claimIdx", type: "uint256" }
        ],
        name: "ClaimClosedAfterConfirmationExpired",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "dealId", type: "uint256" },
          { indexed: true, name: "claimIdx", type: "uint256" }
        ],
        name: "ClaimClosed",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "to", type: "address" },
          { indexed: false, name: "amount", type: "uint256" }
        ],
        name: "ReclaimTokens",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "to", type: "address" },
          { indexed: false, name: "amount", type: "uint256" }
        ],
        name: "ReclaimEther",
        type: "event"
      },
      { anonymous: false, inputs: [], name: "Pause", type: "event" },
      { anonymous: false, inputs: [], name: "Unpause", type: "event" },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "_address", type: "address" },
          { indexed: false, name: "_isMonethaAddress", type: "bool" }
        ],
        name: "MonethaAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "previousOwner", type: "address" }],
        name: "OwnershipRenounced",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [{ name: "_newMinStake", type: "uint256" }],
        name: "setMinStake",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getClaimsCount",
        outputs: [{ name: "count", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_dealId", type: "uint256" },
          { name: "_dealHash", type: "bytes32" },
          { name: "_reasonNote", type: "string" },
          { name: "_requesterId", type: "bytes32" },
          { name: "_respondentId", type: "bytes32" },
          { name: "_amountToStake", type: "uint256" }
        ],
        name: "create",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_claimIdx", type: "uint256" }],
        name: "accept",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_claimIdx", type: "uint256" },
          { name: "_resolutionNote", type: "string" }
        ],
        name: "resolve",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_claimIdx", type: "uint256" }],
        name: "close",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<MonethaClaimHandler> {
    const contract = new MonethaClaimHandler(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get minStake(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.minStake, []);
  }

  public get paused(): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.paused, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get token(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.token, []);
  }

  public get getClaimsCount(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getClaimsCount, []);
  }

  public isMonethaAddress(arg0: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isMonethaAddress, [
      arg0.toString()
    ]);
  }

  public claims(
    arg0: BigNumber | number
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      string
    ]
  > {
    return TC.promisify(this.rawWeb3Contract.claims, [arg0.toString()]);
  }

  public reclaimTokenTx(
    _token: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "reclaimToken",
      [_token.toString()]
    );
  }
  public reclaimEtherToTx(
    _to: BigNumber | string,
    _value: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "reclaimEtherTo",
      [_to.toString(), _value.toString()]
    );
  }
  public unpauseTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "unpause", []);
  }
  public renounceOwnershipTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "renounceOwnership",
      []
    );
  }
  public pauseTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "pause", []);
  }
  public reclaimEtherTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "reclaimEther",
      []
    );
  }
  public reclaimTokenToTx(
    _token: BigNumber | string,
    _to: BigNumber | string,
    _value: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "reclaimTokenTo",
      [_token.toString(), _to.toString(), _value.toString()]
    );
  }
  public setMonethaAddressTx(
    _address: BigNumber | string,
    _isMonethaAddress: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setMonethaAddress",
      [_address.toString(), _isMonethaAddress]
    );
  }
  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public setMinStakeTx(
    _newMinStake: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setMinStake",
      [_newMinStake.toString()]
    );
  }
  public createTx(
    _dealId: BigNumber | number,
    _dealHash: string,
    _reasonNote: string,
    _requesterId: string,
    _respondentId: string,
    _amountToStake: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "create", [
      _dealId.toString(),
      _dealHash.toString(),
      _reasonNote.toString(),
      _requesterId.toString(),
      _respondentId.toString(),
      _amountToStake.toString()
    ]);
  }
  public acceptTx(
    _claimIdx: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "accept", [
      _claimIdx.toString()
    ]);
  }
  public resolveTx(
    _claimIdx: BigNumber | number,
    _resolutionNote: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "resolve", [
      _claimIdx.toString(),
      _resolutionNote.toString()
    ]);
  }
  public closeTx(
    _claimIdx: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "close", [
      _claimIdx.toString()
    ]);
  }

  public MinStakeUpdatedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { previousMinStake: BigNumber | number; newMinStake: BigNumber | number },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { previousMinStake: BigNumber | number; newMinStake: BigNumber | number },
      {}
    >(this, "MinStakeUpdated", eventFilter);
  }
  public ClaimCreatedEvent(eventFilter: {
    dealId?: BigNumber | number | Array<BigNumber | number>;
    claimIdx?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { dealId: BigNumber | number; claimIdx: BigNumber | number },
    {
      dealId?: BigNumber | number | Array<BigNumber | number>;
      claimIdx?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { dealId: BigNumber | number; claimIdx: BigNumber | number },
      {
        dealId?: BigNumber | number | Array<BigNumber | number>;
        claimIdx?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ClaimCreated", eventFilter);
  }
  public ClaimAcceptedEvent(eventFilter: {
    dealId?: BigNumber | number | Array<BigNumber | number>;
    claimIdx?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { dealId: BigNumber | number; claimIdx: BigNumber | number },
    {
      dealId?: BigNumber | number | Array<BigNumber | number>;
      claimIdx?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { dealId: BigNumber | number; claimIdx: BigNumber | number },
      {
        dealId?: BigNumber | number | Array<BigNumber | number>;
        claimIdx?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ClaimAccepted", eventFilter);
  }
  public ClaimResolvedEvent(eventFilter: {
    dealId?: BigNumber | number | Array<BigNumber | number>;
    claimIdx?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { dealId: BigNumber | number; claimIdx: BigNumber | number },
    {
      dealId?: BigNumber | number | Array<BigNumber | number>;
      claimIdx?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { dealId: BigNumber | number; claimIdx: BigNumber | number },
      {
        dealId?: BigNumber | number | Array<BigNumber | number>;
        claimIdx?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ClaimResolved", eventFilter);
  }
  public ClaimClosedAfterAcceptanceExpiredEvent(eventFilter: {
    dealId?: BigNumber | number | Array<BigNumber | number>;
    claimIdx?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { dealId: BigNumber | number; claimIdx: BigNumber | number },
    {
      dealId?: BigNumber | number | Array<BigNumber | number>;
      claimIdx?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { dealId: BigNumber | number; claimIdx: BigNumber | number },
      {
        dealId?: BigNumber | number | Array<BigNumber | number>;
        claimIdx?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ClaimClosedAfterAcceptanceExpired", eventFilter);
  }
  public ClaimClosedAfterResolutionExpiredEvent(eventFilter: {
    dealId?: BigNumber | number | Array<BigNumber | number>;
    claimIdx?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { dealId: BigNumber | number; claimIdx: BigNumber | number },
    {
      dealId?: BigNumber | number | Array<BigNumber | number>;
      claimIdx?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { dealId: BigNumber | number; claimIdx: BigNumber | number },
      {
        dealId?: BigNumber | number | Array<BigNumber | number>;
        claimIdx?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ClaimClosedAfterResolutionExpired", eventFilter);
  }
  public ClaimClosedAfterConfirmationExpiredEvent(eventFilter: {
    dealId?: BigNumber | number | Array<BigNumber | number>;
    claimIdx?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { dealId: BigNumber | number; claimIdx: BigNumber | number },
    {
      dealId?: BigNumber | number | Array<BigNumber | number>;
      claimIdx?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { dealId: BigNumber | number; claimIdx: BigNumber | number },
      {
        dealId?: BigNumber | number | Array<BigNumber | number>;
        claimIdx?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ClaimClosedAfterConfirmationExpired", eventFilter);
  }
  public ClaimClosedEvent(eventFilter: {
    dealId?: BigNumber | number | Array<BigNumber | number>;
    claimIdx?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { dealId: BigNumber | number; claimIdx: BigNumber | number },
    {
      dealId?: BigNumber | number | Array<BigNumber | number>;
      claimIdx?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { dealId: BigNumber | number; claimIdx: BigNumber | number },
      {
        dealId?: BigNumber | number | Array<BigNumber | number>;
        claimIdx?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ClaimClosed", eventFilter);
  }
  public ReclaimTokensEvent(eventFilter: {
    to?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { to: BigNumber | string; amount: BigNumber | number },
    { to?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { to: BigNumber | string; amount: BigNumber | number },
      { to?: BigNumber | string | Array<BigNumber | string> }
    >(this, "ReclaimTokens", eventFilter);
  }
  public ReclaimEtherEvent(eventFilter: {
    to?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { to: BigNumber | string; amount: BigNumber | number },
    { to?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { to: BigNumber | string; amount: BigNumber | number },
      { to?: BigNumber | string | Array<BigNumber | string> }
    >(this, "ReclaimEther", eventFilter);
  }
  public PauseEvent(eventFilter: {}): TC.DeferredEventWrapper<{}, {}> {
    return new TC.DeferredEventWrapper<{}, {}>(this, "Pause", eventFilter);
  }
  public UnpauseEvent(eventFilter: {}): TC.DeferredEventWrapper<{}, {}> {
    return new TC.DeferredEventWrapper<{}, {}>(this, "Unpause", eventFilter);
  }
  public MonethaAddressSetEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { _address: BigNumber | string; _isMonethaAddress: boolean },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { _address: BigNumber | string; _isMonethaAddress: boolean },
      {}
    >(this, "MonethaAddressSet", eventFilter);
  }
  public OwnershipRenouncedEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string },
    { previousOwner?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string },
      { previousOwner?: BigNumber | string | Array<BigNumber | string> }
    >(this, "OwnershipRenounced", eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}

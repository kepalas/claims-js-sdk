/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class MonethaClaimHandler extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    isMonethaAddress(arg0: string): TransactionObject<boolean>;

    claims(
      arg0: number | string
    ): TransactionObject<{
      state: string;
      modified: string;
      dealId: string;
      dealHash: string;
      reasonNote: string;
      requesterId: string;
      requesterAddress: string;
      requesterStaked: string;
      respondentId: string;
      respondentAddress: string;
      respondentStaked: string;
      resolutionNote: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
      10: string;
      11: string;
    }>;

    reclaimToken(_token: string): TransactionObject<void>;

    reclaimEtherTo(
      _to: string,
      _value: number | string
    ): TransactionObject<void>;

    unpause(): TransactionObject<void>;

    renounceOwnership(): TransactionObject<void>;

    pause(): TransactionObject<void>;

    reclaimEther(): TransactionObject<void>;

    reclaimTokenTo(
      _token: string,
      _to: string,
      _value: number | string
    ): TransactionObject<void>;

    setMonethaAddress(
      _address: string,
      _isMonethaAddress: boolean
    ): TransactionObject<void>;

    transferOwnership(_newOwner: string): TransactionObject<void>;

    setMinStake(_newMinStake: number | string): TransactionObject<void>;

    create(
      _dealId: number | string,
      _dealHash: string | number[],
      _reasonNote: string,
      _requesterId: string | number[],
      _respondentId: string | number[],
      _amountToStake: number | string
    ): TransactionObject<void>;

    accept(_claimIdx: number | string): TransactionObject<void>;

    resolve(
      _claimIdx: number | string,
      _resolutionNote: string
    ): TransactionObject<void>;

    close(_claimIdx: number | string): TransactionObject<void>;

    minStake(): TransactionObject<string>;
    paused(): TransactionObject<boolean>;
    owner(): TransactionObject<string>;
    token(): TransactionObject<string>;
    getClaimsCount(): TransactionObject<string>;
  };
  events: {
    MinStakeUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ClaimCreated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ClaimAccepted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ClaimResolved(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ClaimClosedAfterAcceptanceExpired(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ClaimClosedAfterResolutionExpired(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ClaimClosedAfterConfirmationExpired(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ClaimClosed(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ReclaimTokens(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ReclaimEther(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Pause(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Unpause(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    MonethaAddressSet(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipRenounced(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}

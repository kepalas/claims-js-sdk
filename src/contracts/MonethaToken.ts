/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class MonethaToken extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "name",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_spender", type: "address" },
          { name: "_value", type: "uint256" }
        ],
        name: "approve",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "totalSupply",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_from", type: "address" },
          { name: "_to", type: "address" },
          { name: "_value", type: "uint256" }
        ],
        name: "transferFrom",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "decimals",
        outputs: [{ name: "", type: "uint8" }],
        payable: false,
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "burn",
        outputs: [],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "standard",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "ico",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "lockedAmount",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "balanceOf",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "startTime",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "tokensForIco",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "symbol",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_value", type: "uint256" }
        ],
        name: "transfer",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "lockReleaseDate",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_icoAddress", type: "address" }],
        name: "setICO",
        outputs: [],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }, { name: "", type: "address" }],
        name: "allowance",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newStart", type: "uint256" }],
        name: "setStart",
        outputs: [],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "reservedAmount",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function"
      },
      {
        inputs: [
          { name: "_ownerAddr", type: "address" },
          { name: "_startTime", type: "uint256" }
        ],
        payable: false,
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "from", type: "address" },
          { indexed: true, name: "to", type: "address" },
          { indexed: false, name: "value", type: "uint256" }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "_owner", type: "address" },
          { indexed: true, name: "spender", type: "address" },
          { indexed: false, name: "value", type: "uint256" }
        ],
        name: "Approval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: "amount", type: "uint256" }],
        name: "Burned",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<MonethaToken> {
    const contract = new MonethaToken(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get name(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.name, []);
  }

  public get totalSupply(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.totalSupply, []);
  }

  public get decimals(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.decimals, []);
  }

  public get standard(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.standard, []);
  }

  public get ico(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.ico, []);
  }

  public get lockedAmount(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.lockedAmount, []);
  }

  public get startTime(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.startTime, []);
  }

  public get tokensForIco(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.tokensForIco, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get symbol(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.symbol, []);
  }

  public get lockReleaseDate(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.lockReleaseDate, []);
  }

  public get reservedAmount(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.reservedAmount, []);
  }

  public balanceOf(arg0: BigNumber | string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.balanceOf, [arg0.toString()]);
  }

  public allowance(
    arg0: BigNumber | string,
    arg1: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.allowance, [
      arg0.toString(),
      arg1.toString()
    ]);
  }

  public approveTx(
    _spender: BigNumber | string,
    _value: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "approve", [
      _spender.toString(),
      _value.toString()
    ]);
  }
  public transferFromTx(
    _from: BigNumber | string,
    _to: BigNumber | string,
    _value: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferFrom",
      [_from.toString(), _to.toString(), _value.toString()]
    );
  }
  public burnTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "burn", []);
  }
  public transferTx(
    _to: BigNumber | string,
    _value: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "transfer", [
      _to.toString(),
      _value.toString()
    ]);
  }
  public setICOTx(
    _icoAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setICO", [
      _icoAddress.toString()
    ]);
  }
  public setStartTx(
    _newStart: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setStart", [
      _newStart.toString()
    ]);
  }

  public TransferEvent(eventFilter: {
    from?: BigNumber | string | Array<BigNumber | string>;
    to?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      from: BigNumber | string;
      to: BigNumber | string;
      value: BigNumber | number;
    },
    {
      from?: BigNumber | string | Array<BigNumber | string>;
      to?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        from: BigNumber | string;
        to: BigNumber | string;
        value: BigNumber | number;
      },
      {
        from?: BigNumber | string | Array<BigNumber | string>;
        to?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "Transfer", eventFilter);
  }
  public ApprovalEvent(eventFilter: {
    _owner?: BigNumber | string | Array<BigNumber | string>;
    spender?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      _owner: BigNumber | string;
      spender: BigNumber | string;
      value: BigNumber | number;
    },
    {
      _owner?: BigNumber | string | Array<BigNumber | string>;
      spender?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        _owner: BigNumber | string;
        spender: BigNumber | string;
        value: BigNumber | number;
      },
      {
        _owner?: BigNumber | string | Array<BigNumber | string>;
        spender?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "Approval", eventFilter);
  }
  public BurnedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { amount: BigNumber | number },
    {}
  > {
    return new TC.DeferredEventWrapper<{ amount: BigNumber | number }, {}>(
      this,
      "Burned",
      eventFilter
    );
  }
}
